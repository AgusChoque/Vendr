// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuthProvider {
  GOOGLE
  LOCAL
}

enum UserRole {
  ADMIN
  OWNER
  CLIENT
}

enum EmployeeRole {
  MANAGER
  CASHIER
  DELIVERY
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  SENT
  DELIVERED
  REJECTED
  CANCELLED
}

model Credential {
  id String @id @default(dbgenerated("'credential-' || gen_random_uuid()"))
  provider AuthProvider
  providerId String?
  email String? @unique
  password String? @db.VarChar(120)
  
  userId String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
}

model User {
  id String @id @default(dbgenerated("'user-' || gen_random_uuid()"))
  name String
  email String @unique
  role UserRole @default(CLIENT)
  createdAt DateTime @default(now())
  
  Credential Credential[]
  business   Business?
  orders Order[]
}

model Business {
  id String @id @default(dbgenerated("'business-' || gen_random_uuid()"))
  name String
  address String
  phone String
  createdAt DateTime @default(now())
  
  ownerId String @unique
  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  employees Employee[]
  categories Category[]
  products Product[]
  orders Order[]
}

model Employee {
  id String @id @default(dbgenerated("'employee-' || gen_random_uuid()"))
  name String
  email String
  role EmployeeRole
  createdAt DateTime @default(now())
  
  businessId String
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@unique([email, businessId])
}

model Category {
  id String @id @default(dbgenerated("'category-' || gen_random_uuid()"))
  name String
  createdAt DateTime @default(now())
  
  businessId String
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  
  products Product[]
}

model Product {
  id String @id @default(dbgenerated("'product-' || gen_random_uuid()"))
  name String
  description String
  price Float
  isAvailable Boolean @default(true)
  createdAt DateTime @default(now())

  businessId String
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  categoryId String
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  orderItems OrderItem[]
}

model Order {
  id String @id @default(dbgenerated("'order-' || gen_random_uuid()"))
  clientId String
  client User @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  businessId String
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  
  status OrderStatus @default(PENDING)
  totalPrice Float
  createdAt DateTime @default(now())

  items OrderItem[]
}

model OrderItem {
  id String @id @default(dbgenerated("'order-item-' || gen_random_uuid()"))
  orderId String
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  productId String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  quantity Int
  price Float
  createdAt DateTime @default(now())
}